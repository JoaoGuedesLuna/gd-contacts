package main.java.com.gdcontacts;

import main.java.com.gdcontacts.model.Contact;

import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;
import javax.swing.JOptionPane;

/**
 * Essa √© a classe principal do programa, √© nela que haver√° a execu√ß√£o de toda a aplica√ß√£o. O objetivo
 * dessa classe √© simular um aplicativo onde o usu√°rio poder√° adicionar seus contatos, buscar seus contatos,
 * ou remover seus contatos. Toda a parte gr√°fica do programa foi feita apenas se utilizando de m√©todos
 * est√°ticos da classe JOptionPane.
 *
 * @author Jo√£o Guedes.
 */
public class GDContactsApplication {

    private final List<Contact> CONTACTS;

    public GDContactsApplication() {
        this.CONTACTS = new ArrayList<>();
    }

    /**
     * Inicia um ‚Äòloop‚Äô que gerencia os pain√©is da aplica√ß√£o conforme a escolha do usu√°rio. O ‚Äòloop‚Äô
     * s√≥ ser√° encerrado caso o usu√°rio deseje sair da aplica√ß√£o.
     */
    public void start() {
        Integer option;
        do {
            option = this.showCentralOptionsDialog();
            if (option == null) {
                return;
            }
            if (option == 3) {
                this.showAddContactDialog();
            }
            else if (this.CONTACTS.isEmpty()) {
                JOptionPane.showMessageDialog(null, "     Lista de contatos vazia.", null, JOptionPane.INFORMATION_MESSAGE);
            }
            else if (option == 1) {
                this.showContactSearchDialog();
            }
            else if (option == 2) {
                this.showContactsListDialog();
            }
            else if (option == 4) {
                this.showEditContactDialog();
            }
            else if (option == 5) {
                this.showRemoveContactDialog();
            }
            else if (option == 6) {
                this.showRemoveAllContactsDialog();
            }
        } while (true);
    }

    /**
     * Exibe um painel central de op√ß√µes onde o usu√°rio poder√° escolher que op√ß√£o ele deseja usar
     * (buscar contato, visualizar contatos, adicionar contato, remover contato...).
     *
     * @return Retorna um valor equivalente √† op√ß√£o que o usu√°rio escolheu.
     */
    private Integer showCentralOptionsDialog() {
        String[] options = this.getArrayOptions();
        String input;
        int intInput;
        do {
            input = JOptionPane.showInputDialog(null, options, "Menu de Op√ß√µes ‚öô", JOptionPane.PLAIN_MESSAGE);
            if (input == null) {
                return null;
            }
            try {
                intInput = Integer.parseInt(input);
                if (intInput >= 1 && intInput <= options.length) {
                    return intInput;
                }
                JOptionPane.showMessageDialog(null, "          Op√ß√£o Inv√°lida!", null, JOptionPane.ERROR_MESSAGE);
            }
            catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(null, "          Op√ß√£o Inv√°lida!", null, JOptionPane.ERROR_MESSAGE);
            }
        } while (true);
    }

    /**
     * Exibe um painel onde o usu√°rio poder√° adicionar um contato a sua lista de contatos, informando nome,
     * telefone e email.
     */
    private void showAddContactDialog() {
        Contact newContact = new Contact();
        do {
            newContact = this.showInputContactInformationDialog(newContact.getName(), newContact.getTelephone(), newContact.getEmail());
            if (newContact == null) {
                return;
            }
            if (newContact.getName().length() == 0 && newContact.getTelephone().length() == 0 && newContact.getEmail().length() == 0) {
                JOptionPane.showMessageDialog(null, "N√£o h√° nada para salvar. O contato foi descartado.", null, JOptionPane.INFORMATION_MESSAGE);
                return;
            }
            if (!this.contactAlreadyExists(newContact)) {
                this.CONTACTS.add(newContact);
                this.CONTACTS.sort(Contact::compareTo);
                JOptionPane.showMessageDialog(null, "Contato adicionado com sucesso!", null, JOptionPane.INFORMATION_MESSAGE);
                return;
            }
            JOptionPane.showMessageDialog(null, "J√° existe um contato com essa mesma identifica√ß√£o.", null, JOptionPane.ERROR_MESSAGE);
        } while (true);
    }

    /**
     * Exibe um painel onde o usu√°rio poder√° visualizar os dados de um contato espec√≠fico.
     */
    private void showContactSearchDialog() {
        Contact contactSearched = this.showSearchDialog();
        if (contactSearched != null) {
            JOptionPane.showMessageDialog(null, contactSearched, "Contato", JOptionPane.PLAIN_MESSAGE);
        }
    }

    /**
     * Exibe um painel onde o usu√°rio poder√° visualizar todos os seus contatos.
     */
    private void showContactsListDialog() {
        String[] contactsInformation = this.CONTACTS.stream().map(Contact::toString).toList().toArray(new String[0]);
        String[] visibleInformation = Arrays.copyOf(contactsInformation, 4);
        String[] options = {"Cancelar", "‚è™", "‚è©"};
        int length = visibleInformation.length;
        int option, srcPos, destPos = visibleInformation.length-1;
        do {
            option = JOptionPane.showOptionDialog(null, visibleInformation, "Visualizar Contatos üìë", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, null, options, null);
            if (option < 1) {
                return;
            }
            if (option == 1 && destPos > (length-1)) {
                srcPos = destPos - (length*2-1);
                destPos -= length;
                System.arraycopy(contactsInformation, srcPos, visibleInformation, 0, length);
            }
            else if (option == 2 && destPos < contactsInformation.length-1) {
                Arrays.fill(visibleInformation, null);
                srcPos = destPos + 1;
                destPos += length;
                System.arraycopy(contactsInformation, srcPos, visibleInformation, 0, Math.min(contactsInformation.length-srcPos, length));
            }
        } while (true);
    }

    /**
     * Exibe um painel onde o usu√°rio poder√° editar um contato espec√≠fico.
     */
    private void showEditContactDialog() {
        Contact contactSearched = this.showSearchDialog();
        if (contactSearched == null) {
            return;
        }
        Contact editedContact;
        do {
            editedContact = this.showInputContactInformationDialog(contactSearched.getName(), contactSearched.getTelephone(), contactSearched.getEmail());
            if (editedContact == null) {
                return;
            }
            if (editedContact.getName().length() == 0 && editedContact.getTelephone().length() == 0 && editedContact.getEmail().length() == 0) {
                JOptionPane.showMessageDialog(null, "Campos vazios. Digite algo ou cancele a edi√ß√£o.", null, JOptionPane.ERROR_MESSAGE);
            }
            else {
                if (!this.editedContactAlreadyExists(contactSearched, editedContact)) {
                    this.CONTACTS.set(this.CONTACTS.indexOf(contactSearched), editedContact);
                    this.CONTACTS.sort(Contact::compareTo);
                    JOptionPane.showMessageDialog(null, "Contato editado com sucesso!", null, JOptionPane.INFORMATION_MESSAGE);
                    return;
                }
                JOptionPane.showMessageDialog(null, "J√° existe um contato com a mesma identifica√ß√£o!", null, JOptionPane.ERROR_MESSAGE);
            }
        } while(true);
    }

    /**
     * Exibe um painel onde o usu√°rio poder√° remover um contato em espec√≠fico.
     */
    private void showRemoveContactDialog() {
        Contact contactSearched = this.showSearchDialog();
        if (contactSearched == null) {
            return;
        }
        String message = contactSearched + "\nTem certeza que deseja excluir este contato?";
        int option = JOptionPane.showConfirmDialog(null, message, "Excluir Contato ‚ùå",JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (option == 0) {
            this.CONTACTS.remove(contactSearched);
            JOptionPane.showMessageDialog(null, "Contato removido com sucesso!", null, JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        JOptionPane.showMessageDialog(null, "O contato n√£o foi exclu√≠do.", null, JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * Exibe um painel onde o usu√°rio poder√° remover todos os contatos da sua lista de contatos.
     */
    private void showRemoveAllContactsDialog() {
        int option = JOptionPane.showConfirmDialog(null, "Voc√™ tem certeza que quer excluir todos os seus contatos?", "Excluir todos os contatos ‚ö†", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (option == 0) {
            this.CONTACTS.clear();
            JOptionPane.showMessageDialog(null, "Contatos exclu√≠dos com sucesso!", null, JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        JOptionPane.showMessageDialog(null, "Seus contatos n√£o foram exclu√≠dos!", null, JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * Exibe um painel onde o usu√°rio poder√° fazer a busca de um contato.
     *
     * @return Retorna um contato. Caso o contato n√£o seja encontrado ser√° retornado o valor null.
     */
    private Contact showSearchDialog() {
        String contactId = this.showInputDialog("Contato: ", "Buscar Contato üîé", null);
        if (contactId == null) {
            return null;
        }
        Contact contactSearched = this.findContactById(contactId);
        if (contactSearched == null) {
            JOptionPane.showMessageDialog(null, "Contato n√£o encontrado.", null, JOptionPane.INFORMATION_MESSAGE);
        }
        return contactSearched;
    }

    /**
     * Exibe um painel de entrada de dados onde o usu√°rio ir√° preencher uma informa√ß√£o do contato.
     *
     * @param message Tipo da informa√ß√£o que o usu√°rio ir√° passar. Ex.: nome, telefone, email...
     *
     * @param title T√≠tulo do painel.
     *
     * @param initialValue Valor inicial do campo de texto.
     *
     * @return Retorna o valor que o usu√°rio passou de entrada. Caso ele n√£o passe nada o valor
     * retornado ser√° null.
     */
    private String showInputDialog(String message, String title, String initialValue) {
        String input = (String) JOptionPane.showInputDialog(null, message, title, JOptionPane.PLAIN_MESSAGE, null, null, initialValue);
        return input == null ? null : input.trim();
    }

    /**
     * Exibe pain√©is de entrada de dados para preenchimento das informa√ß√µes de um contato.
     *
     * @param nameInitialValue Valor inicial do campo nome do contato.
     *
     * @param telephoneInitialValue Valor inicial do campo telephone do contato.
     *
     * @param emailInitialValue Valor inicial do campo email do contato.
     *
     * @return Retorna um contato conforme o que o usu√°rio digitou. Caso ele cancele ou n√£o digite
     * nada ser√° retornado o valor null.
     */
    private Contact showInputContactInformationDialog(String nameInitialValue, String telephoneInitialValue, String emailInitialValue) {
        String name = this.showInputDialog("Nome", "Contato ‚òé", nameInitialValue);
        if (name == null) {
            return null;
        }
        String telephone = this.showInputDialog("Telefone", "Contato ‚òé", telephoneInitialValue);
        if (telephone == null) {
            return null;
        }
        String email = this.showInputDialog("Email", "Contato ‚òé",  emailInitialValue);
        if (email == null) {
            return null;
        }
        return this.createContact(name, telephone, email);
    }

    /**
     * Retorna um array de String onde cada posi√ß√£o equivale a uma op√ß√£o da central de op√ß√µes.
     *
     * @return Retorna um array de String onde cada posi√ß√£o equivale a uma op√ß√£o da central de op√ß√µes.
     */
    private String[] getArrayOptions() {
        return new String[] {
                "[1] - Buscar Contato üîé",
                "[2] - Visualizar Contatos üëÅ",
                "[3] - Adicionar Contato ‚ûï",
                "[4] - Editar Contato üñç",
                "[5] - Excluir Contato ‚ùå",
                "[6] - Excluir Todos os contatos ‚ö†"
        };
    }

    /**
     * Cria um contato. Caso o nome do contato seja diferente de vazio, o id do contato ser√° igual
     * ao nome. Caso o nome do contato seja vazio e o telefone diferente de vazio, ent√£o o id do
     * contato ser√° igual ao telefone. Caso o nome e o telefone sejam vazios, ent√£o o id do contato
     * ser√° igual ao email.
     *
     * @param name Nome do contato.
     *
     * @param telephone Telefone do contato.
     *
     * @param email Email do contato.
     *
     * @return Um contato.
     */
    private Contact createContact(String name, String telephone, String email) {
        if (name.length() > 0) {
            return Contact.builder().id(name).name(name).telephone(telephone).email(email).build();
        }
        if (telephone.length() > 0) {
            return Contact.builder().id(telephone).name(name).telephone(telephone).email(email).build();
        }
        return Contact.builder().id(email).name(name).telephone(telephone).email(email).build();
    }

    /**
     * Busca um contato na lista de contatos pelo id.
     *
     * @param contactId id do contato procurado.
     *
     * @return Retorna um contato. Caso o contato n√£o seja encontrado o valor retornado ser√° null.
     */
    private Contact findContactById(String contactId) {
        return this.CONTACTS
                .stream()
                .filter(contact -> contact.getId().equalsIgnoreCase(contactId))
                .findAny()
                .orElse(null);
    }

    /**
     * Diz se um contato com uma mesma identifica√ß√£o j√° existe na lista de contatos.
     *
     * @param contact Contato que ser√° avaliado.
     *
     * @return true caso um contato com a mesma identifica√ß√£o j√° esteja contido na lista de contatos
     * ou false caso n√£o exista nem um contato com a mesma identifica√ß√£o.
     */
    private boolean contactAlreadyExists(Contact contact) {
        return this.findContactById(contact.getId()) != null;

    }

    /**
     * Retorna se um contato editado j√° existe na lista de contatos.
     *
     * @param contact Contato antes da edi√ß√£o.
     *
     * @param editedContact Contato ap√≥s a edi√ß√£o.
     *
     * @return Retorna true caso o contato editado j√° exista ou false caso o contato editado n√£o
     * exista na lista de contatos.
     */
    private boolean editedContactAlreadyExists(Contact contact, Contact editedContact) {
        return this.CONTACTS.stream()
                .anyMatch(cont -> cont.getId().equalsIgnoreCase(editedContact.getId())
                        && !(cont.equals(contact)));
    }

    public static void main(String[] args) {
        GDContactsApplication contactsApp = new GDContactsApplication();
        contactsApp.start();
    }

}